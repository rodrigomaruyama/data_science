ggplot(data = pf, aes(x = dob_day)) +
geom_histogram(binwidth = 1) +
scale_x_continuous(breaks = 1:31) +
facet_wrap(~dob_month)
install.packages('alr3')
library(alr3)
data(Mitchell)
Mitchell
names(Mitchell)
mt <- data(Mitchell)
ggplot(data=mt, aes(x=Temp, y=Month)) +
geom_point()
install.packages('ggplot2')
library(ggplot2)
data(Mitchell)
ggplot(data=mt, aes(x=Temp, y=Month)) +
geom_point()
ggplot(data=mt, aes(x=Temp, y=Month))
ggplot(data=mt, aes(x=Temp, y=Month))
ggplot(data=mt, aes(x=Month, y=Temp))
ggplot(data=mt, aes(x=Month, y=Temp)) +
geom_point()
mt <- as.numeric(data(Mitchell))
ggplot(data=mt, aes(x=Month, y=Temp)) +
geom_point()
ggplot(data=mt, aes(x=Month, y=Temp)) +
geom_point()
ggplot(data=MItchell, aes(x=Month, y=Temp)) +
geom_point()
ggplot(data=Mitchell, aes(x=Month, y=Temp)) +
geom_point()
data(Mitchell)
ggplot(data=Mitchell, aes(x=Month, y=Temp)) +
geom_point()
with(mt, cor.test(Month, Temp))
with(Mitchell, cor.test(Month, Temp))
ggplot(data=Mitchell, aes(x=Month, y=Temp)) +
geom_point() +
scale_x_continuous()
ggplot(data=Mitchell, aes(x=Month, y=Temp)) +
geom_point() +
scale_x_continuous(limits = c(1,12))
ggplot(data=Mitchell, aes(x=Month, y=Temp)) +
geom_point() +
scale_x_continuous(limits = c(13,24))
ggplot(data=Mitchell, aes(x=Month, y=Temp)) +
geom_point() +
scale_x_continuous(limits = c(25,36))
with(Mitchell, cor.test(Month, Temp))
ggplot(data=Mitchell, aes(x=Month, y=Temp)) +
geom_point() +
scale_x_discrete(breaks = seq(0, 203, 12))
ggplot(data=Mitchell, aes(x=Month, y=Temp)) +
geom_point() +
scale_x_discrete(breaks = seq(0, 203, 12))
ggplot(data=Mitchell, aes(x=(Month%%12), y=Temp)) +
geom_point()
ggplot(data=Mitchell, aes(x=Month, y=Temp)) +
geom_point() +
scale_x_discrete(breaks=seq(0, 203, 12))
ggplot(data=Mitchell, aes(x=Month, y=Temp)) +
geom_point() +
scale_x_discrete(breaks=seq(0, 203, 12))
ggplot(data=Mitchell, aes(x=Month, y=Temp)) +
geom_point() +
scale_x_discrete(breaks=seq(0, 203, 12))
range(Mitchell)
Mitchell
Mitchell$Month
range(Mitchell$Month)
install.packages(ggplot2)
library(ggplot2)
install.packages('ggplot2')
install.packages("ggplot2")
install.packages('ggplot2')
install.packages("ggplot2")
library(ggplot2)
data(diamonds)
diamonds
ggplot(data=diamonds, aes(x=price, y=x)) +
geom_point()
cor.test(diamonds$price, diamonds$x)
cor.test(diamonds$price, diamonds$y)
cor.test(diamonds$price, diamonds$z)
ggplot(data=diamonds, aes(x=price, y=depth)) +
geom_point()
=diamonds, aes(x=price, y=depth)) +
geom_point
ce, y=depth)) +
geom_point(alpha=0.01)
ggplot(data=diamonds, aes(x=price, y=depth)) +
geom_point(alpha= 1/100)
, y=depth)) +
geom_point(alpha= 1/100) +
scale_x_continuous(breaks = 2)
depth)) +
geom_point(alpha= 1/100) +
scale_x_continuous(breaks = c(5000, 1
x=price, y=depth)) +
geom_point(alpha= 1/100) +
scale_x_continuous(breaks
) +
geom_point(alpha= 1/100) +
scale_x_continuous(breaks = seq(0, 20000, b
geom_point()
ggplot(data=diamonds, aes(x=price, y=depth)) +
geom_point(alpha= 1/100) +
scale_x_continuous(breaks = seq(0, 20000, by = 2))
ggplot(data=diamonds, aes(x=price, y=depth)) +
geom_point(alpha= 1/100) +
scale_x_continuous(breaks = seq(0, 20000, by = 2000))
ggplot(data=diamonds, aes(y=price, x=depth)) +
geom_point(alpha= 1/100) +
scale_x_continuous(breaks = seq(0, 20000, by = 2000))
ggplot(data=diamonds, aes(y=price, x=depth)) +
geom_point(alpha= 1/100) +
scale_x_continuous(breaks = seq(0, 20000, by = 2000)) +
scale_y_continuous()
View(diamonds)
ggplot(data=diamonds, aes(y=price, x=depth)) +
geom_point(alpha= 1/100) +
scale_x_continuous(breaks = seq(0, 20000, by = 2000)) +
scale_y_continuous(breaks = seq(40, 70, by = 5))
ggplot(data=diamonds, aes(y=price, x=depth)) +
geom_point(alpha= 1/100) +
scale_y_continuous(breaks = seq(0, 20000, by = 2000)) +
scale_x_continuous(breaks = seq(40, 70, by = 5))
ggplot(data=diamonds, aes(y=price, x=depth)) +
geom_point(alpha= 1/100) +
scale_y_continuous(breaks = seq(0, 20000, by = 2000)) +
scale_x_continuous(breaks = seq(40, 70, by = 2.5))
ggplot(data=diamonds, aes(y=price, x=depth)) +
geom_point(alpha= 1/100) +
scale_y_continuous(breaks = seq(0, 20000, by = 2000)) +
scale_x_continuous(breaks = seq(40, 70, by = 1))
cor.test(diamonds$price, diamonds$depth)
range(diamonds$price)
range(diamonds$carat)
# Quiz 8
ggplot(aes(x=price, y=carat), data=diamonds) +
geom_point()
range(diamonds$carat)
range(diamonds$price)
length(diamonds$price)
length(diamonds$carat)
# Quiz 8
ggplot(aes(x=price, y=carat), data=diamonds.small[0:53400,]) +
geom_point()
# Quiz 8
ggplot(aes(x=price, y=carat), data=diamonds[0:53400,]) +
geom_point()
install.packages('gridExtra')
library(gridExtra)
grid.arrange(p1, p2, ncol=2)
# Quiz 8
p1 <- ggplot(aes(x=price, y=carat), data=diamonds) +
geom_point()
p2 <- ggplot(aes(x=price, y=carat), data=diamonds[0:53400,]) +
geom_point()
grid.arrange(p1, p2, ncol=2)
library(svm)
install.packages('svm')
install.packages('kernlab')
library(kernlab)
remove.packages('kernlab')
install.packages('caret')
library(caret)
install.packages('kernlab')
install.packages("kernlab")
library(kernlab)
svp = ksvm(y ~ x1 + x2, data = d, type="C-svc")
svp = ksvm(y ~ x1 + x2, data = wdf, type="C-svc")
# Load the Data
wdf <- read.csv('data/wineQualityWhites.csv')
setwd("C:/Users/maru/Documents/dsNanodegree/machine-learning-master/projects/finding_donors/dataAnalysisR/project/")
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
#install.packages("ggplot2", dependencies = TRUE)
#install.packages("knitr", dependencies = TRUE)
#install.packages("dplyr", dependencies = TRUE)
#install.packages('GGally', dependencies = TRUE)
#install.packages('tidyverse')
#install.packages('ggthemes')
#install.packages('corrplot')
#install.packages('ggbiplot)
library(ggplot2)
library(knitr)
library(dplyr)
library(GGally)
library(tidyverse)
library(ggthemes)
library(gridExtra)
library(corrplot)
library(grid)
library(lattice)
library(ggbiplot)
# Load the Data
wdf <- read.csv('data/wineQualityWhites.csv')
wdf$X <- NULL
svp = ksvm(y ~ x1 + x2, data = wdf, type="C-svc")
?ksvm
?ksvm
set.seed(123)
samp <- sample(nrow(wdf), 0.6 * nrow(wdf))
# Creating train and test datasets
train <- wdf[samp, ]
test <- wdf[-samp, ]
filter <- ksvm(type~., data=train, kernel="rbfdot", kpar=list(sigma=0.05), C=5, cross=3)
filter <- ksvm(type~, data=train, kernel="rbfdot", kpar=list(sigma=0.05), C=5, cross=3)
filter <- ksvm(quality~., data=train, kernel="rbfdot", kpar=list(sigma=0.05), C=5, cross=3)
filter
predict(filter,test)
quality_train <- ksvm(quality~., data=train, kernel="rbfdot", kpar=list(sigma=0.05), C=5, cross=3)
table(quality_pred,test)
quality_pred <- predict(quality_train,test)
table(quality_pred,test)
quality_train <- ksvm(quality~., data=train, kernel="rbfdot", kpar=list(sigma=0.05), C=5, cross=3)
quality_pred <- predict(quality_train,test)
table(quality_pred,test)
set.seed(123)
samp <- sample(nrow(wdf), 0.5 * nrow(wdf))
# Creating train and test datasets
train <- wdf[samp, ]
test <- wdf[-samp, ]
quality_train <- ksvm(quality~., data=train, kernel="rbfdot", kpar=list(sigma=0.05), C=5, cross=3)
quality_pred <- predict(quality_train,test)
table(quality_pred,test)
View(train)
View(test)
View(train)
View(test)
View(quality_train)
View(quality_pred)
set.seed(123)
samp <- sample(nrow(wdf), 0.5 * nrow(wdf))
# Creating train and test datasets
train <- wdf[samp, ]
test <- wdf[-samp, ]
quality_train <- ksvm(quality~., data=train, kernel="rbfdot", kpar=list(sigma=0.05), C=5, cross=3)
quality_pred <- predict(quality_train,test[,-58])
table(quality_pred,test[,-58])
View(quality_pred)
set.seed(123)
samp <- sample(nrow(wdf), 0.7 * nrow(wdf))
# Creating train and test datasets
train <- wdf[samp, ]
test <- wdf[-samp, ]
train[['quality']] <- factor(train[['quality']])
train[['quality']] <- as.factor(train[['quality']])
quality_train <- ksvm(quality~., data=train, kernel="rbfdot")
svm_fit <- ksvm(quality~., data=train, kernel="rbfdot")
quality_pred <- predict(svm_fit,test)
View(test)
table(quality_pred,test)
dim(quality_pred)
train_data <- train[,1:11]
View(train_data)
train_label <- train[,12]
set.seed(123)
samp <- sample(nrow(wdf), 0.7 * nrow(wdf))
# Creating train and test datasets
train <- wdf[samp, ]
train[['quality']] <- as.factor(train[['quality']])
train_data <- train[,1:11]
train_label <- train[,12]
train_label <- train[,'quality']
set.seed(123)
samp <- sample(nrow(wdf), 0.7 * nrow(wdf))
# Creating train and test datasets
train <- wdf[samp, ]
train_data <- train[,1:11]
train_label <- train[,'quality']
test <- wdf[-samp, ]
test_data <- test[,1:11]
test_label <- test[,12]
train_label <- as.factor(train_label)
test_label <- as.factor(test_label)
svm_fit <- ksvm(train_data,train_label, kernel="rbfdot")
svm_fit <- ksvm(train_data,train_label, kernel="rbfdot", kpar=list(sigma=0.05),C=5,cross=3)
svm_fit <- ksvm(train_data,train_label, kernel="rbfdot", kpar=list(sigma=0.05),C=5,cross=3)
set.seed(123)
samp <- sample(nrow(wdf), 0.7 * nrow(wdf))
# Creating train and test datasets
train <- wdf[samp, ]
train_x <- train[,1:11]
train_y <- train[,'quality']
test <- wdf[-samp, ]
test_x <- test[,1:11]
test_y <- test[,12]
train_y <- as.factor(train_y)
test_y <- as.factor(test_y)
library(caret)
install.packages('caret')
library(caret)
library('caret')
library(caret)
library(caret)
setwd("C:/Users/maru/Documents/dsNanodegree/machine-learning-master/projects/finding_donors/dataAnalysisR/project/")
# Load all of the packages that you end up using in your analysis in this code
# chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk. This
# prevents the code from displaying in the knitted HTML output. You should set
# echo=FALSE for all code chunks in your file, unless it makes sense for your
# report to show the code that generated a particular plot.
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
#install.packages("ggplot2", dependencies = TRUE)
#install.packages("knitr", dependencies = TRUE)
#install.packages("dplyr", dependencies = TRUE)
#install.packages('GGally', dependencies = TRUE)
#install.packages('tidyverse')
#install.packages('ggthemes')
#install.packages('corrplot')
#install.packages('ggbiplot)
library(ggplot2)
library(knitr)
library(dplyr)
library(GGally)
library(tidyverse)
library(ggthemes)
library(gridExtra)
library(corrplot)
library(grid)
library(lattice)
library(ggbiplot)
# Load the Data
wdf <- read.csv('data/wineQualityWhites.csv')
wdf$X <- NULL
library(kernlab)
library(caret)
# want it to. This will clean up the flow of your report.
#install.packages("ggplot2", dependencies = TRUE)
#install.packages("knitr", dependencies = TRUE)
#install.packages("dplyr", dependencies = TRUE)
#install.packages('GGally', dependencies = TRUE)
#install.packages('tidyverse')
#install.packages('ggthemes')
#install.packages('corrplot')
#install.packages('ggbiplot)
#install.packages('kernlab')
install.packages('caret')
library(caret)
library("caret", lib.loc="~/R/win-library/3.4")
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
#install.packages("ggplot2", dependencies = TRUE)
#install.packages("knitr", dependencies = TRUE)
#install.packages("dplyr", dependencies = TRUE)
#install.packages('GGally', dependencies = TRUE)
#install.packages('tidyverse', dependencies = TRUE)
#install.packages('ggthemes', dependencies = TRUE)
#install.packages('corrplot', dependencies = TRUE)
#install.packages('ggbiplot, dependencies = TRUE)
install.packages('kernlab', dependencies = TRUE)
install.packages("kernlab", dependencies = TRUE)
install.packages('caret', dependencies = TRUE)
library(kernlab)
library(caret)
set.seed(123)
samp <- sample(nrow(wdf), 0.7 * nrow(wdf))
# Creating train datasets
train <- wdf[samp, ]
train_x <- train[,1:11]       # data
train_y <- train[,'quality']  # label
# Creating test datasets
test <- wdf[-samp, ]
test_x <- test[,1:11]   # data
test_y <- test[,12]     # label
# Transforming the variable to a factor
train_y <- as.factor(train_y)
test_y <- as.factor(test_y)
svm_fit <- ksvm(train_data,train_label, kernel="rbfdot")
quality_pred <- predict(svm_fit,test)
table(quality_pred,test)
setwd("C:/Users/maru/Documents/dsNanodegree/machine-learning-master/projects/finding_donors/dataAnalysisR/project/")
# Load all of the packages that you end up using in your analysis in this code
# chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk. This
# prevents the code from displaying in the knitted HTML output. You should set
# echo=FALSE for all code chunks in your file, unless it makes sense for your
# report to show the code that generated a particular plot.
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
#install.packages("ggplot2", dependencies = TRUE)
#install.packages("knitr", dependencies = TRUE)
#install.packages("dplyr", dependencies = TRUE)
#install.packages('GGally', dependencies = TRUE)
#install.packages('tidyverse', dependencies = TRUE)
#install.packages('ggthemes', dependencies = TRUE)
#install.packages('corrplot', dependencies = TRUE)
#install.packages('ggbiplot, dependencies = TRUE)
#install.packages('kernlab', dependencies = TRUE)
#install.packages('caret', dependencies = TRUE)
library(ggplot2)
library(knitr)
library(dplyr)
library(GGally)
library(tidyverse)
library(ggthemes)
library(gridExtra)
library(corrplot)
library(grid)
library(lattice)
library(ggbiplot)
library(kernlab)
library(caret)
# Load the Data
wdf <- read.csv('data/wineQualityWhites.csv')
wdf$X <- NULL
setwd("C:/Users/maru/Documents/dsNanodegree/machine-learning-master/projects/ \finding_donors/dataAnalysisR/project/")
