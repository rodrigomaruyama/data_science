ggplot(data = pf, aes(x = dob_day)) +
geom_histogram(binwidth = 1) +
scale_x_continuous(breaks = 1:31) +
facet_wrap(~dob_month)
install.packages('alr3')
library(alr3)
data(Mitchell)
Mitchell
names(Mitchell)
mt <- data(Mitchell)
ggplot(data=mt, aes(x=Temp, y=Month)) +
geom_point()
install.packages('ggplot2')
library(ggplot2)
data(Mitchell)
ggplot(data=mt, aes(x=Temp, y=Month)) +
geom_point()
ggplot(data=mt, aes(x=Temp, y=Month))
ggplot(data=mt, aes(x=Temp, y=Month))
ggplot(data=mt, aes(x=Month, y=Temp))
ggplot(data=mt, aes(x=Month, y=Temp)) +
geom_point()
mt <- as.numeric(data(Mitchell))
ggplot(data=mt, aes(x=Month, y=Temp)) +
geom_point()
ggplot(data=mt, aes(x=Month, y=Temp)) +
geom_point()
ggplot(data=MItchell, aes(x=Month, y=Temp)) +
geom_point()
ggplot(data=Mitchell, aes(x=Month, y=Temp)) +
geom_point()
data(Mitchell)
ggplot(data=Mitchell, aes(x=Month, y=Temp)) +
geom_point()
with(mt, cor.test(Month, Temp))
with(Mitchell, cor.test(Month, Temp))
ggplot(data=Mitchell, aes(x=Month, y=Temp)) +
geom_point() +
scale_x_continuous()
ggplot(data=Mitchell, aes(x=Month, y=Temp)) +
geom_point() +
scale_x_continuous(limits = c(1,12))
ggplot(data=Mitchell, aes(x=Month, y=Temp)) +
geom_point() +
scale_x_continuous(limits = c(13,24))
ggplot(data=Mitchell, aes(x=Month, y=Temp)) +
geom_point() +
scale_x_continuous(limits = c(25,36))
with(Mitchell, cor.test(Month, Temp))
ggplot(data=Mitchell, aes(x=Month, y=Temp)) +
geom_point() +
scale_x_discrete(breaks = seq(0, 203, 12))
ggplot(data=Mitchell, aes(x=Month, y=Temp)) +
geom_point() +
scale_x_discrete(breaks = seq(0, 203, 12))
ggplot(data=Mitchell, aes(x=(Month%%12), y=Temp)) +
geom_point()
ggplot(data=Mitchell, aes(x=Month, y=Temp)) +
geom_point() +
scale_x_discrete(breaks=seq(0, 203, 12))
ggplot(data=Mitchell, aes(x=Month, y=Temp)) +
geom_point() +
scale_x_discrete(breaks=seq(0, 203, 12))
ggplot(data=Mitchell, aes(x=Month, y=Temp)) +
geom_point() +
scale_x_discrete(breaks=seq(0, 203, 12))
range(Mitchell)
Mitchell
Mitchell$Month
range(Mitchell$Month)
install.packages(ggplot2)
library(ggplot2)
install.packages('ggplot2')
install.packages("ggplot2")
install.packages('ggplot2')
install.packages("ggplot2")
library(ggplot2)
data(diamonds)
diamonds
ggplot(data=diamonds, aes(x=price, y=x)) +
geom_point()
cor.test(diamonds$price, diamonds$x)
cor.test(diamonds$price, diamonds$y)
cor.test(diamonds$price, diamonds$z)
ggplot(data=diamonds, aes(x=price, y=depth)) +
geom_point()
=diamonds, aes(x=price, y=depth)) +
geom_point
ce, y=depth)) +
geom_point(alpha=0.01)
ggplot(data=diamonds, aes(x=price, y=depth)) +
geom_point(alpha= 1/100)
, y=depth)) +
geom_point(alpha= 1/100) +
scale_x_continuous(breaks = 2)
depth)) +
geom_point(alpha= 1/100) +
scale_x_continuous(breaks = c(5000, 1
x=price, y=depth)) +
geom_point(alpha= 1/100) +
scale_x_continuous(breaks
) +
geom_point(alpha= 1/100) +
scale_x_continuous(breaks = seq(0, 20000, b
geom_point()
ggplot(data=diamonds, aes(x=price, y=depth)) +
geom_point(alpha= 1/100) +
scale_x_continuous(breaks = seq(0, 20000, by = 2))
ggplot(data=diamonds, aes(x=price, y=depth)) +
geom_point(alpha= 1/100) +
scale_x_continuous(breaks = seq(0, 20000, by = 2000))
ggplot(data=diamonds, aes(y=price, x=depth)) +
geom_point(alpha= 1/100) +
scale_x_continuous(breaks = seq(0, 20000, by = 2000))
ggplot(data=diamonds, aes(y=price, x=depth)) +
geom_point(alpha= 1/100) +
scale_x_continuous(breaks = seq(0, 20000, by = 2000)) +
scale_y_continuous()
View(diamonds)
ggplot(data=diamonds, aes(y=price, x=depth)) +
geom_point(alpha= 1/100) +
scale_x_continuous(breaks = seq(0, 20000, by = 2000)) +
scale_y_continuous(breaks = seq(40, 70, by = 5))
ggplot(data=diamonds, aes(y=price, x=depth)) +
geom_point(alpha= 1/100) +
scale_y_continuous(breaks = seq(0, 20000, by = 2000)) +
scale_x_continuous(breaks = seq(40, 70, by = 5))
ggplot(data=diamonds, aes(y=price, x=depth)) +
geom_point(alpha= 1/100) +
scale_y_continuous(breaks = seq(0, 20000, by = 2000)) +
scale_x_continuous(breaks = seq(40, 70, by = 2.5))
ggplot(data=diamonds, aes(y=price, x=depth)) +
geom_point(alpha= 1/100) +
scale_y_continuous(breaks = seq(0, 20000, by = 2000)) +
scale_x_continuous(breaks = seq(40, 70, by = 1))
cor.test(diamonds$price, diamonds$depth)
range(diamonds$price)
range(diamonds$carat)
# Quiz 8
ggplot(aes(x=price, y=carat), data=diamonds) +
geom_point()
range(diamonds$carat)
range(diamonds$price)
length(diamonds$price)
length(diamonds$carat)
# Quiz 8
ggplot(aes(x=price, y=carat), data=diamonds.small[0:53400,]) +
geom_point()
# Quiz 8
ggplot(aes(x=price, y=carat), data=diamonds[0:53400,]) +
geom_point()
install.packages('gridExtra')
library(gridExtra)
grid.arrange(p1, p2, ncol=2)
# Quiz 8
p1 <- ggplot(aes(x=price, y=carat), data=diamonds) +
geom_point()
p2 <- ggplot(aes(x=price, y=carat), data=diamonds[0:53400,]) +
geom_point()
grid.arrange(p1, p2, ncol=2)
# cd Documents/dsNanodegree/machine-learning-master/projects/finding_donors/
setwd("C:/Users/maru/Documents/dsNanodegree/machine-learning-master/projects/finding_donors/dataAnalysisR/project")
# Load all of the packages that you end up using in your analysis in this code
# chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk. This
# prevents the code from displaying in the knitted HTML output. You should set
# echo=FALSE for all code chunks in your file, unless it makes sense for your
# report to show the code that generated a particular plot.
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
#install.packages("ggplot2", dependencies = TRUE)
#install.packages("knitr", dependencies = TRUE)
#install.packages("dplyr", dependencies = TRUE)
#install.packages('GGally', dependencies = TRUE)
library(ggplot2)
library(knitr)
library(dplyr)
library(GGally)
# Load the Data
wdf <- read.csv('data/wineQualityWhites.csv')
# Remove the column X from Dataframe
# https://stackoverflow.com/questions/6286313/remove-an-entire-column-from-a-data-frame-in-r/30620946
wdf$X <- NULL
ggplot(data = wdf, aes(x = quality, y = alcohol)) +
geom_point()
ggplot(data = wdf, aes(x = quality, y = alcohol)) +
geom_boxplot()
ggplot(data = wdf, aes(x = quality, y = alcohol)) +
geom_boxplot()
ggplot(data = wdf, aes(x = quality, y = alcohol)) +
geom_jitter()
ggplot(data = wdf) +
geom_jitter(mapping = aes(x = quality, y = alcohol))
ggplot(data = wdf) +
geom_boxplot(mapping = aes(x = quality, y = alcohol))
ggplot(data = wdf) +
geom_point(mapping = aes(x = quality, y = alcohol))
ggplot(data = wdf) +
geom_boxplot(mapping = aes(x = quality, y = alcohol))
ggplot(data = wdf) +
geom_boxplot(aes(x = quality, y = alcohol))
ggplot(data = wdf, aes(x = quality, y = alcohol)) +
geom_boxplot(aes(group = cut_width(quality, 1)))
ggplot(data = wdf, aes(x = quality, y = pH)) +
geom_boxplot(aes(group = cut_width(quality, 1)))
ggplot(data = wdf, aes(x = quality, y = density)) +
geom_boxplot(aes(group = cut_width(quality, 1)))
ggplot(data = wdf, aes(x = alcohol, y = pH)) +
geom_point()
ggplot(data = wdf, aes(x = alcohol, y = pH)) +
geom_jitter()
ggplot(data = wdf, aes(x = alcohol, y = pH, colour = quality)) +
geom_jitter()
ggplot(data = wdf, aes(x = residual.sugar, y = pH, colour = quality)) +
geom_jitter()
ggplot(data = wdf, aes(y = residual.sugar, x = pH, colour = quality)) +
geom_jitter()
ggplot(data = wdf, aes(x = quality, y = residual.sugar)) +
geom_boxplot(aes(group = cut_width(quality, 1)))
ggplot(data = wdf, aes(y = residual.sugar, x = pH, colour = quality)) +
geom_jitter()
ggplot(data = wdf, aes(y = residual.sugar, x = quality, colour = pH)) +
geom_jitter()
