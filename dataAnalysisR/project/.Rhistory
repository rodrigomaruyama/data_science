geom_point(alpha= 1/100) +
scale_x_continuous(breaks = seq(0, 20000, by = 2000))
ggplot(data=diamonds, aes(y=price, x=depth)) +
geom_point(alpha= 1/100) +
scale_x_continuous(breaks = seq(0, 20000, by = 2000))
ggplot(data=diamonds, aes(y=price, x=depth)) +
geom_point(alpha= 1/100) +
scale_x_continuous(breaks = seq(0, 20000, by = 2000)) +
scale_y_continuous()
View(diamonds)
ggplot(data=diamonds, aes(y=price, x=depth)) +
geom_point(alpha= 1/100) +
scale_x_continuous(breaks = seq(0, 20000, by = 2000)) +
scale_y_continuous(breaks = seq(40, 70, by = 5))
ggplot(data=diamonds, aes(y=price, x=depth)) +
geom_point(alpha= 1/100) +
scale_y_continuous(breaks = seq(0, 20000, by = 2000)) +
scale_x_continuous(breaks = seq(40, 70, by = 5))
ggplot(data=diamonds, aes(y=price, x=depth)) +
geom_point(alpha= 1/100) +
scale_y_continuous(breaks = seq(0, 20000, by = 2000)) +
scale_x_continuous(breaks = seq(40, 70, by = 2.5))
ggplot(data=diamonds, aes(y=price, x=depth)) +
geom_point(alpha= 1/100) +
scale_y_continuous(breaks = seq(0, 20000, by = 2000)) +
scale_x_continuous(breaks = seq(40, 70, by = 1))
cor.test(diamonds$price, diamonds$depth)
range(diamonds$price)
range(diamonds$carat)
# Quiz 8
ggplot(aes(x=price, y=carat), data=diamonds) +
geom_point()
range(diamonds$carat)
range(diamonds$price)
length(diamonds$price)
length(diamonds$carat)
# Quiz 8
ggplot(aes(x=price, y=carat), data=diamonds.small[0:53400,]) +
geom_point()
# Quiz 8
ggplot(aes(x=price, y=carat), data=diamonds[0:53400,]) +
geom_point()
install.packages('gridExtra')
library(gridExtra)
grid.arrange(p1, p2, ncol=2)
# Quiz 8
p1 <- ggplot(aes(x=price, y=carat), data=diamonds) +
geom_point()
p2 <- ggplot(aes(x=price, y=carat), data=diamonds[0:53400,]) +
geom_point()
grid.arrange(p1, p2, ncol=2)
# cd Documents/dsNanodegree/machine-learning-master/projects/finding_donors/
setwd("C:/Users/maru/Documents/dsNanodegree/machine-learning-master/projects/finding_donors/dataAnalysisR/project")
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
#install.packages("ggplot2", dependencies = TRUE)
#install.packages("knitr", dependencies = TRUE)
#install.packages("dplyr", dependencies = TRUE)
#install.packages('GGally', dependencies = TRUE)
#install.packages('tidyverse')
#install.packages('ggthemes')
#install.packages('corrplot')
library(ggplot2)
library(knitr)
library(dplyr)
library(GGally)
library(tidyverse)
library(ggthemes)
library(gridExtra)
library(corrplot)
# Load the Data
wdf <- read.csv('data/wineQualityWhites.csv')
# Remove the column X from Dataframe
# https://stackoverflow.com/questions/6286313/remove-an-entire-column-from-a-data-frame-in-r/30620946
wdf$X <- NULL
head(wdf)
names(wdf)
dim(wdf)
# GGpairs
# https://www.rdocumentation.org/packages/GGally/versions/1.4.0/topics/ggpairs
ggpairs(wdf)
ggplot(data = wdf, aes_string(x=quality)) + geom_density(fill='#99CCFF') + geom_vline(aes_string(xintercept=mean(wdf[, quality])), color='blue', size=0.5) + geom_vline(aes_string(xintercept=median(wdf[, quality])), color='red', size=0.5) +    geom_vline(aes_string(xintercept=quantile(wdf[, quality], 0.25)), linetype='dashed', size=0.5) +    geom_vline(aes_string(xintercept=quantile(wdf[, quality], 0.75)), linetype='dashed', size=0.5)
View(wdf)
ggplot(data = wdf, aes_string(x=quality)) + geom_density(fill='#99CCFF') + geom_vline(aes_string(xintercept=mean(wdf[, 'quality'])), color='blue', size=0.5) + geom_vline(aes_string(xintercept=median(wdf[, 'quality'])), color='red', size=0.5) +    geom_vline(aes_string(xintercept=quantile(wdf[, 'quality'], 0.25)), linetype='dashed', size=0.5) +    geom_vline(aes_string(xintercept=quantile(wdf[, 'quality'], 0.75)), linetype='dashed', size=0.5)
ggplot(data = wdf, aes_string(x=quality)) + geom_density(fill='#99CCFF') + geom_vline(aes_string(xintercept=mean(wdf$quality)), color='blue', size=0.5) + geom_vline(aes_string(xintercept=median(wdf$quality)), color='red', size=0.5) +    geom_vline(aes_string(xintercept=quantile(wdf$quality, 0.25)), linetype='dashed', size=0.5) +    geom_vline(aes_string(xintercept=quantile(wdf$quality, 0.75)), linetype='dashed', size=0.5)
ggplot(data = wdf, aes(x=quality)) + geom_density(fill='#99CCFF') + geom_vline(aes_string(xintercept=mean(wdf$quality)), color='blue', size=0.5) + geom_vline(aes_string(xintercept=median(wdf$quality)), color='red', size=0.5) +    geom_vline(aes_string(xintercept=quantile(wdf$quality, 0.25)), linetype='dashed', size=0.5) +    geom_vline(aes_string(xintercept=quantile(wdf$quality, 0.75)), linetype='dashed', size=0.5)
ggplot(data = wdf, aes(x=quality)) + geom_histogram(fill='#99CCFF') + geom_vline(aes_string(xintercept=mean(wdf$quality)), color='blue', size=0.5) + geom_vline(aes_string(xintercept=median(wdf$quality)), color='red', size=0.5) +    geom_vline(aes_string(xintercept=quantile(wdf$quality, 0.25)), linetype='dashed', size=0.5) +    geom_vline(aes_string(xintercept=quantile(wdf$quality, 0.75)), linetype='dashed', size=0.5)
ggplot(data = wdf, aes(x=quality)) + geom_histogram(fill='#99CCFF', binwidth = 1) + geom_vline(aes_string(xintercept=mean(wdf$quality)), color='blue', size=0.5) + geom_vline(aes_string(xintercept=median(wdf$quality)), color='red', size=0.5) +    geom_vline(aes_string(xintercept=quantile(wdf$quality, 0.25)), linetype='dashed', size=0.5) +    geom_vline(aes_string(xintercept=quantile(wdf$quality, 0.75)), linetype='dashed', size=0.5)
ggplot(data = wdf, aes(x=quality)) + geom_histogram(fill='#99CCFF', binwidth = 1) + geom_vline(aes_string(xintercept=mean(wdf$quality)), color='blue', size=0.5) + geom_vline(aes_string(xintercept=median(wdf$quality)), color='red', size=0.5) +    geom_vline(aes_string(xintercept=quantile(wdf$quality, 0.25)), linetype='dashed', size=0.5) +    geom_vline(aes_string(xintercept=quantile(wdf$quality, 0.75)), linetype='dashed', size=0.5) + scale_x_discrete('Quality', labels = c(3, 4, 5, 6, 7, 8, 9))
ggplot(data = wdf, aes(x=quality)) + geom_histogram(fill='#99CCFF', binwidth = 1) + geom_vline(aes_string(xintercept=mean(wdf$quality)), color='blue', size=0.5) + geom_vline(aes_string(xintercept=median(wdf$quality)), color='red', size=0.5) +    geom_vline(aes_string(xintercept=quantile(wdf$quality, 0.25)), linetype='dashed', size=0.5) +    geom_vline(aes_string(xintercept=quantile(wdf$quality, 0.75)), linetype='dashed', size=0.5) + scale_x_discrete('Quality', labels = c('3', '4', '5', '6', '7', '8', '9'))
ggplot(data = wdf, aes(x=quality)) + geom_histogram(fill='#99CCFF', binwidth = 1) + geom_vline(aes_string(xintercept=mean(wdf$quality)), color='blue', size=0.5) + geom_vline(aes_string(xintercept=median(wdf$quality)), color='red', size=0.5) +    geom_vline(aes_string(xintercept=quantile(wdf$quality, 0.25)), linetype='dashed', size=0.5) +    geom_vline(aes_string(xintercept=quantile(wdf$quality, 0.75)), linetype='dashed', size=0.5)
ggplot(data = wdf, aes(x=quality)) + geom_histogram(fill='#99CCFF', binwidth = 1) + geom_vline(aes_string(xintercept=mean(wdf$quality)), color='blue', size=0.5) + geom_vline(aes_string(xintercept=median(wdf$quality)), color='red', size=0.5) +    geom_vline(aes_string(xintercept=quantile(wdf$quality, 0.25)), linetype='dashed', size=0.5) +    geom_vline(aes_string(xintercept=quantile(wdf$quality, 0.75)), linetype='dashed', size=0.5) + ggtitle('Wine Quality Histogram')
ggplot(data = wdf, aes(x=quality)) + geom_histogram(fill='#99CCFF', binwidth = 1) + geom_vline(aes_string(xintercept=mean(wdf$quality)), color='blue', size=0.5) + geom_vline(aes_string(xintercept=median(wdf$quality)), color='red', size=0.5) +    geom_vline(aes_string(xintercept=quantile(wdf$quality, 0.25)), linetype='dashed', size=0.5) +    geom_vline(aes_string(xintercept=quantile(wdf$quality, 0.75)), linetype='dashed', size=0.5) + ggtitle('Wine Quality Histogram')
ggsave(file = 'pictures/quality_stat.png')
qqnorm(wdf$quality)
qqline(wdf$quality)
p1 <- ggplot(aes(x=fixed.acidity), data = wdf) + geom_histogram(fill='#99CCFF')
p2 <- ggplot(aes(x=volatile.acidity), data = wdf) + geom_histogram(fill='#99CCFF')
p3 <- ggplot(aes(x=citric.acid), data = wdf) + geom_histogram(fill='#99CCFF')
p4 <- ggplot(aes(x=residual.sugar), data = wdf) + geom_histogram(fill='#99CCFF')
p5 <- ggplot(aes(x=chlorides), data = wdf) + geom_histogram(fill='#99CCFF')
p6 <- ggplot(aes(x=free.sulfur.dioxide), data = wdf) + geom_histogram(fill='#99CCFF')
p7 <- ggplot(aes(x=total.sulfur.dioxide), data = wdf) + geom_histogram(fill='#99CCFF')
p8 <- ggplot(aes(x=density), data = wdf) + geom_histogram(fill='#99CCFF')
p9 <- ggplot(aes(x=pH), data = wdf) + geom_histogram(fill='#99CCFF', binwidth = 0.1)
p10 <- ggplot(aes(x=sulphates), data = wdf) + geom_histogram(fill='#99CCFF')
p11 <- ggplot(aes(x=alcohol), data = wdf) + geom_histogram(fill='#99CCFF', binwidth = 0.5)
p12 <- ggplot(aes(x=quality), data = wdf) + geom_histogram(fill='#99CCFF', binwidth = 1)
u1 <- grid.arrange(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, ncol = 4)
ggsave(file = 'pictures/1_univariate.png', u1)
# Resources for this Chunk
# How to color the histograms
# https://www.r-bloggers.com/how-to-make-a-histogram-with-ggplot2/
wdf$quality.2 <- ifelse(wdf$quality < 6, 'bad', ifelse(wdf$quality == 6, 'normal', 'good'))
wdf$quality.2 <- as.factor(wdf$quality.2)
ggplot(data = wdf, aes(x=quality.2)) + geom_histogram(fill='#99CCFF')
View(wdf)
ggplot(data = wdf, aes_string(x=quality.2)) + geom_histogram(fill='#99CCFF')
ggplot(data = wdf, aes_string(x=wdf$quality.2)) + geom_histogram(fill='#99CCFF')
hist(wdf$quality.2)
table(wdf$quality.2)
# Removing outliers for density and residual.sugar for better visualization
p1 <- ggplot(data = wdf, aes(x = quality, y = alcohol, fill = quality)) +
geom_boxplot(aes(group = cut_width(quality, 1)))
p2 <- ggplot(data = wdf, aes(x = quality, y = pH, fill = quality)) +
geom_boxplot(aes(group = cut_width(quality, 1)))
p3 <- ggplot(data = wdf, aes(x = quality, y = density, fill = quality)) +
geom_boxplot(aes(group = cut_width(quality, 1))) +
scale_y_continuous(limits = c(0.98, 1.01))
p4 <- ggplot(data = wdf, aes(x = quality, y = residual.sugar, fill = quality)) +
geom_boxplot(aes(group = cut_width(quality, 1))) +
scale_y_continuous(limits = c(0, 30))
b2 <- grid.arrange(p1, p2, p3, p4, ncol = 4, top = textGrob("Bivariate plot 2",gp=gpar(fontsize=15,font=3)))
ggsave(file = 'pictures/2_bivariate.png', b2)
p1 <- ggplot(data = wdf, aes(x = quality, y = alcohol, fill = quality)) +
geom_boxplot(aes(group = cut_width(quality, 1)))
p2 <- ggplot(data = wdf, aes(x = quality, y = pH, fill = quality)) +
geom_boxplot(aes(group = cut_width(quality, 1)))
p3 <- ggplot(data = wdf, aes(x = quality, y = density, fill = quality)) +
geom_boxplot(aes(group = cut_width(quality, 1))) +
scale_y_continuous(limits = c(0.98, 1.01))
p4 <- ggplot(data = wdf, aes(x = quality, y = residual.sugar, fill = quality)) +
geom_boxplot(aes(group = cut_width(quality, 1))) +
scale_y_continuous(limits = c(0, 30))
b2 <- grid.arrange(p1, p2, p3, p4, ncol = 4, top = textGrob("Bivariate plot 2",gp=gpar(fontsize=15,font=3)))
ggsave(file = 'pictures/2_bivariate.png', b2)
library(gridExtra)
i
b2 <- grid.arrange(p1, p2, p3, p4, ncol = 4, top = textGrob("Bivariate plot 2",gp=gpar(fontsize=15,font=3)))
ggsave(file = 'pictures/2_bivariate.png', b2)
library(grid)
library(lattice)
b2 <- grid.arrange(p1, p2, p3, p4, ncol = 4, top = textGrob("Bivariate plot 2",gp=gpar(fontsize=15,font=3)))
ggsave(file = 'pictures/2_bivariate.png', b2)
# Removing outliers for better visualization
# Solution for Warning message: "Continuous x aesthetic -- did you forget aes(group=...)? "
# https://ggplot2.tidyverse.org/reference/geom_boxplot.html
p1 <- ggplot(data = wdf, aes(x = pH, y = alcohol)) +
geom_point()
p2 <- ggplot(data = wdf, aes(x = pH, y = residual.sugar)) +
geom_point() +
scale_y_continuous(limits = c(0, 30))
p3 <- ggplot(data = wdf, aes(x = alcohol, y = residual.sugar)) +
geom_point() +
scale_y_continuous(limits = c(0, 30))
p4 <- ggplot(data = wdf, aes(x = pH, y = density)) +
geom_point() +
scale_y_continuous(limits = c(0.98, 1.01))
b4 <- grid.arrange(p1, p2, p3, p4, ncol = 4)
ggsave(file = 'pictures/4_bivariate.png', b4, top = textGrob("Bivariate Scatter plot",gp=gpar(fontsize=15,font=3)))
p1 <- ggplot(data = wdf, aes(x = pH, y = alcohol)) +
geom_point()
p1 <- ggplot(data = wdf, aes(x = pH, y = alcohol)) +
geom_point()
p2 <- ggplot(data = wdf, aes(x = pH, y = residual.sugar)) +
geom_point() +
scale_y_continuous(limits = c(0, 30))
p3 <- ggplot(data = wdf, aes(x = alcohol, y = residual.sugar)) +
geom_point() +
scale_y_continuous(limits = c(0, 30))
p4 <- ggplot(data = wdf, aes(x = pH, y = density)) +
geom_point() +
scale_y_continuous(limits = c(0.98, 1.01))
b4 <- grid.arrange(p1, p2, p3, p4, ncol = 4)
b4 <- grid.arrange(p1, p2, p3, p4, ncol = 4, top = textGrob("Bivariate Scatter plot",gp=gpar(fontsize=15,font=3)))
ggsave(file = 'pictures/4_bivariate.png', b4)
p5 <- ggplot(data = wdf, aes(x = total.sulfur.dioxide, y = residual.sugar)) +
geom_point() +
scale_y_continuous(limits = c(0, 30))
p6 <- ggplot(data = wdf, aes(x = total.sulfur.dioxide, y = density)) +
geom_point() +
scale_y_continuous(limits = c(0.98, 1.01))
b4 <- grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 3, top = textGrob("Bivariate Scatter plot",gp=gpar(fontsize=15,font=3)))
ggsave(file = 'pictures/4_1_bivariate.png', b4)
p1 <- ggplot(data = wdf, aes(x = quality, y = alcohol, fill = quality)) +
geom_boxplot(aes(group = cut_width(quality, 1)))
p2 <- ggplot(data = wdf, aes(x = quality, y = pH, fill = quality)) +
geom_boxplot(aes(group = cut_width(quality, 1)))
p3 <- ggplot(data = wdf, aes(x = quality, y = density, fill = quality)) +
geom_boxplot(aes(group = cut_width(quality, 1))) +
scale_y_continuous(limits = c(0.98, 1.01))
p4 <- ggplot(data = wdf, aes(x = quality, y = residual.sugar, fill = quality)) +
geom_boxplot(aes(group = cut_width(quality, 1))) +
scale_y_continuous(limits = c(0, 30))
p5 <- ggplot(data = wdf, aes(x = total.sulfur.dioxide, y = residual.sugar, fill = quality)) +
geom_boxplot() +
scale_y_continuous(limits = c(0, 30))
p6 <- ggplot(data = wdf, aes(x = total.sulfur.dioxide, y = density, fill = quality)) +
geom_boxplot() +
scale_y_continuous(limits = c(0.98, 1.01))
b2 <- grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 3, top = textGrob("Bivariate Boxplot plots ",gp=gpar(fontsize=15,font=3)))
p5 <- ggplot(data = wdf, aes(x = total.sulfur.dioxide, y = residual.sugar, fill = quality)) +
geom_boxplot(aes(group = cut_width(quality, 1))) +
scale_y_continuous(limits = c(0, 30))
p6 <- ggplot(data = wdf, aes(x = total.sulfur.dioxide, y = density, fill = quality)) +
geom_boxplot(aes(group = cut_width(quality, 1))) +
scale_y_continuous(limits = c(0.98, 1.01))
b2 <- grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 3, top = textGrob("Bivariate Boxplot plots ",gp=gpar(fontsize=15,font=3)))
p5 <- ggplot(data = wdf, aes(y = total.sulfur.dioxide, x = quality, fill = quality)) +
geom_boxplot(aes(group = cut_width(quality, 1))) +
scale_y_continuous(limits = c(0, 30))
b2 <- grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 3, top = textGrob("Bivariate Boxplot plots ",gp=gpar(fontsize=15,font=3)))
p5 <- ggplot(data = wdf, aes(y = total.sulfur.dioxide, x = quality, fill = quality)) +
geom_boxplot(aes(group = cut_width(quality, 1)))
b2 <- grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 3, top = textGrob("Bivariate Boxplot plots ",gp=gpar(fontsize=15,font=3)))
p1 <- ggplot(data = wdf, aes(x = quality, y = alcohol, fill = '#99CCFF')) +
geom_boxplot(aes(group = cut_width(quality, 1)))
b2 <- grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 3, top = textGrob("Bivariate Boxplot plots ",gp=gpar(fontsize=15,font=3)))
# Removing outliers for density and residual.sugar for better visualization
p1 <- ggplot(data = wdf, aes(x = quality, y = alcohol, fill = '#99CCFF')) +
geom_boxplot(aes(group = cut_width(quality, 1)))
p2 <- ggplot(data = wdf, aes(x = quality, y = pH, fill = '#99CCFF')) +
geom_boxplot(aes(group = cut_width(quality, 1)))
p3 <- ggplot(data = wdf, aes(x = quality, y = density, fill = '#99CCFF')) +
geom_boxplot(aes(group = cut_width(quality, 1))) +
scale_y_continuous(limits = c(0.98, 1.01))
p4 <- ggplot(data = wdf, aes(x = quality, y = residual.sugar, fill = '#99CCFF')) +
geom_boxplot(aes(group = cut_width(quality, 1))) +
scale_y_continuous(limits = c(0, 30))
p5 <- ggplot(data = wdf, aes(y = total.sulfur.dioxide, x = quality, fill = '#99CCFF')) +
geom_boxplot(aes(group = cut_width(quality, 1)))
p6 <- ggplot(data = wdf, aes(x = total.sulfur.dioxide, y = density, fill = '#99CCFF')) +
geom_boxplot(aes(group = cut_width(quality, 1))) +
scale_y_continuous(limits = c(0.98, 1.01))
b2 <- grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 3, top = textGrob("Bivariate Boxplot plots ",gp=gpar(fontsize=15,font=3)))
ggsave(file = 'pictures/2_1_bivariate.png', b2)
p1 <- ggplot(data = wdf, aes(x = quality, y = alcohol)) +
geom_boxplot(aes(group = cut_width(quality, 1)), fill = '#99CCFF')
ggplot(data = wdf, aes(x = quality, y = alcohol)) +
geom_boxplot(aes(group = cut_width(quality, 1)), fill = '#99CCFF')
p1 <- ggplot(data = wdf, aes(x = quality, y = alcohol)) +
geom_boxplot(aes(group = cut_width(quality, 1)), fill = '#99CCFF')
p2 <- ggplot(data = wdf, aes(x = quality, y = pH)) +
geom_boxplot(aes(group = cut_width(quality, 1)), fill = '#99CCFF')
p3 <- ggplot(data = wdf, aes(x = quality, y = density)) +
geom_boxplot(aes(group = cut_width(quality, 1)), fill = '#99CCFF') +
scale_y_continuous(limits = c(0.98, 1.01))
p4 <- ggplot(data = wdf, aes(x = quality, y = residual.sugar)) +
geom_boxplot(aes(group = cut_width(quality, 1)), fill = '#99CCFF') +
scale_y_continuous(limits = c(0, 30))
p5 <- ggplot(data = wdf, aes(y = total.sulfur.dioxide, x = quality)) +
geom_boxplot(aes(group = cut_width(quality, 1)), fill = '#99CCFF')
p6 <- ggplot(data = wdf, aes(x = total.sulfur.dioxide, y = density)) +
geom_boxplot(aes(group = cut_width(quality, 1)), fill = '#99CCFF') +
scale_y_continuous(limits = c(0.98, 1.01))
b2 <- grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 3, top = textGrob("Bivariate Boxplot plots ",gp=gpar(fontsize=15,font=3)))
ggsave(file = 'pictures/2_1_bivariate.png', b2)
p6 <- ggplot(data = wdf, aes(x = total.sulfur.dioxide, y = residual.sugar)) +
geom_boxplot(aes(group = cut_width(quality, 1)), fill = '#99CCFF') +
scale_y_continuous(limits = c(0, 30))
b2 <- grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 3, top = textGrob("Bivariate Boxplots",gp=gpar(fontsize=15,font=3)))
p6 <- ggplot(data = wdf, aes_string(x = total.sulfur.dioxide, y = residual.sugar)) +
geom_boxplot(aes(group = cut_width(quality, 1)), fill = '#99CCFF') +
scale_y_continuous(limits = c(0, 30))
p1 <- ggplot(data = wdf, aes(x = quality, y = alcohol)) +
geom_boxplot(aes(group = cut_width(quality, 1)), fill = '#99CCFF')
p2 <- ggplot(data = wdf, aes(x = quality, y = pH)) +
geom_boxplot(aes(group = cut_width(quality, 1)), fill = '#99CCFF')
p3 <- ggplot(data = wdf, aes(x = quality, y = density)) +
geom_boxplot(aes(group = cut_width(quality, 1)), fill = '#99CCFF') +
scale_y_continuous(limits = c(0.98, 1.01))
p4 <- ggplot(data = wdf, aes(x = quality, y = residual.sugar)) +
geom_boxplot(aes(group = cut_width(quality, 1)), fill = '#99CCFF') +
scale_y_continuous(limits = c(0, 25))
p5 <- ggplot(data = wdf, aes(y = total.sulfur.dioxide, x = quality)) +
geom_boxplot(aes(group = cut_width(quality, 1)), fill = '#99CCFF')
p6 <- ggplot(data = wdf, aes(x = total.sulfur.dioxide, y = residual.sugar)) +
geom_boxplot(aes(group = cut_width(quality, 1)), fill = '#99CCFF') +
scale_y_continuous(limits = c(0, 25))
b2 <- grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 3, top = textGrob("Bivariate Boxplots",gp=gpar(fontsize=15,font=3)))
ggsave(file = 'pictures/2_1_bivariate.png', b2)
# cd Documents/dsNanodegree/machine-learning-master/projects/finding_donors/
setwd("C:/Users/maru/Documents/dsNanodegree/machine-learning-master/projects/finding_donors/dataAnalysisR/project")
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
#install.packages("ggplot2", dependencies = TRUE)
#install.packages("knitr", dependencies = TRUE)
#install.packages("dplyr", dependencies = TRUE)
#install.packages('GGally', dependencies = TRUE)
#install.packages('tidyverse')
#install.packages('ggthemes')
#install.packages('corrplot')
library(ggplot2)
library(knitr)
library(dplyr)
library(GGally)
library(tidyverse)
library(ggthemes)
library(gridExtra)
library(corrplot)
library(grid)
library(lattice)
# Load the Data
wdf <- read.csv('data/wineQualityWhites.csv')
# Remove the column X from Dataframe
# https://stackoverflow.com/questions/6286313/remove-an-entire-column-from-a-data-frame-in-r/30620946
wdf$X <- NULL
# PCA
wdf.quality <- factor(wdf[,12])
wdf.pca <- prcomp(wdf[,1:11], center = TRUE, scale. = TRUE)
plot(wdf.pca, type = "l")
abline(h=0.6, v=8, col="blue")
#ggsave(file = 'pictures/variance_pca.png', p)
g <- ggbiplot(wdf.pca, obs.scale = 1, var.scale = 1, groups = wdf.quality, ellipse = TRUE, circle = TRUE, alpha = 0.1) + scale_color_discrete(name = '') + theme(legend.direction = 'vertical', legend.position = 'right')
g <- g + ggtitle('Principal component analysis - PCA')
print(g)
ggsave(file = 'pictures/pca.png', g)
wdf.pca
plot(wdf.pca, type='pie')
plot(wdf.pca, type='barplot')
df_wdf.pda <- data.frame(wdf.pca)
table(wdf.pca)
rating <- list(1640, 1060, 2198)
pie(rating, labels = c('Bad', 'Normal', 'Good'))
rating = c(1640, 1060, 2198)
pie(rating, labels = c('Bad', 'Normal', 'Good'))
pie(rating, labels = c('Bad', 'Normal', 'Good'), col = colors)
rating = c(1640, 1060, 2198)
colors = c("red", "orange", "blue")
pie(rating, labels = c('Bad', 'Normal', 'Good'), col = colors)
pie(rating, labels = c('Bad', 'Normal', 'Good'), col = colors, '%')
pie(rating, labels = c('Bad', 'Normal', 'Good'), col = colors, "%")
rating = c(1640, 1060, 2198)
percent <- round(100*rating/sum(rating), 1)
colors = c("red", "orange", "blue")
pie(rating, labels = percent, legend('topright', c('Bad', 'Normal', 'Good')), col = colors)
pie(rating, labels = percent, col = colors)
pie(rating, labels = percent, col = colors) +
legend('topright', c('Bad', 'Normal', 'Good'))
pie(rating, labels = percent, col = colors) +
legend('topright', c('Bad', 'Normal', 'Good')) +
fill = colors
pie(rating, labels = percent, col = colors)
pie(rating, labels = percent, col = colors) +
legend('topright', c('Bad', 'Normal', 'Good'), col = colors)
pie(rating, labels = percent, col = col = rainbow(length(rating))) +
legend('topright', c('Bad', 'Normal', 'Good'), col = colors) +
fill = col = rainbow(length(x))
pie(rating, labels = percent, col = col = rainbow(length(rating))) +
legend('topright', c('Bad', 'Normal', 'Good'), col = colors) +
fill = col = rainbow(length(rating))
pie(rating, labels = percent, col = col = rainbow(length(rating))) +
pie(rating, labels = percent, col = col = rainbow(length(rating))) +
pie(rating, labels = percent, col = col = rainbow(length(rating))) +
pie(rating, labels = percent, col = rainbow(length(rating))) +
pie(rating, labels = percent, col = rainbow(length(rating))) +
legend('topright', c('Bad', 'Normal', 'Good'), fill = rainbow(length(rating)))
pie(rating, labels = percent, col = rainbow(length(rating)), main = 'Wine quality Pie chart distribution') +
legend('topright', c('Bad', 'Normal', 'Good'), fill = rainbow(length(rating)))
# cd Documents/dsNanodegree/machine-learning-master/projects/finding_donors/
setwd("C:/Users/maru/Documents/dsNanodegree/machine-learning-master/projects/,
finding_donors/dataAnalysisR/project")
# cd Documents/dsNanodegree/machine-learning-master/projects/finding_donors/
setwd("C:/Users/maru/Documents/dsNanodegree/machine-learning-master/projects/ \
finding_donors/dataAnalysisR/project")
# cd Documents/dsNanodegree/machine-learning-master/projects/finding_donors/
setwd("C:/Users/maru/Documents/dsNanodegree/machine-learning-master/projects/ \
finding_donors/dataAnalysisR/project/pictures")
setwd("C:/Users/maru/Documents/dsNanodegree/machine-learning-master/projects/ \
finding_donors/dataAnalysisR/project/pictures")
setwd("C:/Users/maru/Documents/dsNanodegree/machine-learning-master/projects/,
finding_donors/dataAnalysisR/project/pictures")
setwd('C:/Users/maru/Documents/dsNanodegree/machine-learning-master/projects/',
'finding_donors/dataAnalysisR/project/pictures')
setwd(paste('C:/Users/maru/Documents/dsNanodegree/machine-learning-master/projects/',
'finding_donors/dataAnalysisR/project/pictures'))
setwd(paste("C:/Users/maru/Documents/dsNanodegree/machine-learning-master/projects/",
"finding_donors/dataAnalysisR/project/pictures"))
setwd(paste("C:/Users/maru/Documents/dsNanodegree/machine-learning-master/projects/",
"finding_donors/dataAnalysisR/project/pictures"))
setwd("C:/Users/maru/Documents/dsNanodegree/machine-learning-master/projects/finding_donors/dataAnalysisR/project/pictures")
# Using a for loop for better programming practice and to save lines of code :)
feature_list <- names(wdf)
p <- list()
a <- 0
for (var in feature_list) {
a <- a + 1
p[[a]] <- ggplot(data = wdf, aes_string(x=var)) +
geom_density(fill='#99CCFF') +
geom_vline(aes_string(xintercept=mean(wdf[, var])),
color='blue', size=0.5) +
geom_vline(aes_string(xintercept=median(wdf[, var])),
color='red', size=0.5) +
geom_vline(aes_string(xintercept=quantile(wdf[, var], 0.25)),
linetype='dashed', size=0.5) +
geom_vline(aes_string(xintercept=quantile(wdf[, var], 0.75)),
linetype='dashed', size=0.5)
}
ggsave(file = 'pictures/2_univariate.png', do.call(grid.arrange, p))
# Solving the error with aes_string in the geom_vline function
#https://www.biostars.org/p/234142/
# Using a for loop for better programming practice and to save lines of code :)
feature_list <- names(wdf)
p <- list()
a <- 0
for (var in feature_list) {
a <- a + 1
p[[a]] <- ggplot(data = wdf, aes_string(x=var)) +
geom_density(fill='#99CCFF') +
geom_vline(aes_string(xintercept=mean(wdf[, var])),
color='blue', size=0.5) +
geom_vline(aes_string(xintercept=median(wdf[, var])),
color='red', size=0.5) +
geom_vline(aes_string(xintercept=quantile(wdf[, var], 0.25)),
linetype='dashed', size=0.5) +
geom_vline(aes_string(xintercept=quantile(wdf[, var], 0.75)),
linetype='dashed', size=0.5)
}
ggsave(file = 'pictures/2_univariate.png', do.call(grid.arrange, p))
# Solving the error with aes_string in the geom_vline function
#https://www.biostars.org/p/234142/
setwd("C:/Users/maru/Documents/dsNanodegree/machine-learning-master/projects/,
+ finding_donors/dataAnalysisR/project/pictures")
setwd("C:/Users/maru/Documents/dsNanodegree/machine-learning-master/projects/,
+ finding_donors/dataAnalysisR/project/pictures")
setwd("C:/Users/maru/Documents/dsNanodegree/machine-learning-master/projects/\  finding_donors/dataAnalysisR/project/pictures")
setwd("C:/Users/maru/Documents/dsNanodegree/machine-learning-master/projects/\    finding_donors/dataAnalysisR/project/pictures")
# PCA
wdf.quality <- factor(wdf[,12])
wdf.pca <- prcomp(wdf[,1:11], center = TRUE, scale. = TRUE)
plot(wdf.pca, type = "l")
abline(h=0.6, v=8, col="blue")
#ggsave(file = 'pictures/variance_pca.png', p)
g <- ggbiplot(wdf.pca, obs.scale = 1, var.scale = 1, groups = wdf.quality, ellipse = TRUE, circle = TRUE, alpha = 0.1) + scale_color_discrete(name = '') + theme(legend.direction = 'vertical', legend.position = 'right')
g <- g + ggtitle('Principal component analysis - PCA')
print(g)
ggsave(file = 'pictures/pca.png', g)
g <- ggbiplot(wdf.pca, obs.scale = 1, var.scale = 1, groups = wdf.quality, ellipse = TRUE, circle = TRUE, alpha = 0.1) + scale_color_discrete(name = '') + theme(legend.direction = 'vertical', legend.position = 'right')
g <- g + ggtitle('Principal component analysis - PCA')
print(g)
g <- ggbiplot(wdf.pca, obs.scale = 1, var.scale = 1, groups = wdf.quality, ellipse = TRUE, circle = TRUE, alpha = 0.1) + scale_color_discrete(name = '') + theme(legend.direction = 'vertical', legend.position = 'right')
library(ggbiplot)
g <- ggbiplot(wdf.pca, obs.scale = 1, var.scale = 1, groups = wdf.quality, ellipse = TRUE, circle = TRUE, alpha = 0.1) + scale_color_discrete(name = '') + theme(legend.direction = 'vertical', legend.position = 'right')
g <- g + ggtitle('Principal component analysis - PCA')
print(g)
ggsave(file = 'pictures/pca.png', g)
g <- ggbiplot(wdf.pca, obs.scale = 1, var.scale = 1, groups = wdf.quality, ellipse = TRUE, circle = TRUE, alpha = 0.1) + scale_color_discrete(name = '') + theme(legend.direction = 'vertical', legend.position = 'right')
g <- g + ggtitle('Principal component analysis - PCA')
print(g)
ggsave(file = 'pictures/pca.png', g)
p1 <- ggplot(data = wdf, aes(x = pH, y = alcohol)) +
geom_point()
p2 <- ggplot(data = wdf, aes(x = pH, y = residual.sugar)) +
geom_point() +
scale_y_continuous(limits = c(0, 30))
p3 <- ggplot(data = wdf, aes(x = alcohol, y = residual.sugar)) +
geom_point() +
scale_y_continuous(limits = c(0, 30))
p4 <- ggplot(data = wdf, aes(x = pH, y = density)) +
geom_point() +
scale_y_continuous(limits = c(0.98, 1.01))
p5 <- ggplot(data = wdf, aes(x = total.sulfur.dioxide, y = residual.sugar)) +
geom_point() +
scale_y_continuous(limits = c(0, 30))
p6 <- ggplot(data = wdf, aes(x = total.sulfur.dioxide, y = density)) +
geom_point() +
geom_smooth(method='lm',formula=y~x) +
scale_y_continuous(limits = c(0.98, 1.01))
b4 <- grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 3, top = textGrob("Bivariate Scatter plot",gp=gpar(fontsize=15,font=3)))
p1 <- ggplot(data = wdf, aes(x = pH, y = alcohol)) +
geom_point() +
geom_smooth(method='lm',formula=y~x)
p2 <- ggplot(data = wdf, aes(x = pH, y = residual.sugar)) +
geom_point() +
geom_smooth(method='lm',formula=y~x) +
scale_y_continuous(limits = c(0, 30))
p3 <- ggplot(data = wdf, aes(x = alcohol, y = residual.sugar)) +
geom_point() +
geom_smooth(method='lm',formula=y~x) +
scale_y_continuous(limits = c(0, 30))
p4 <- ggplot(data = wdf, aes(x = pH, y = density)) +
geom_point() +
geom_smooth(method='lm',formula=y~x) +
scale_y_continuous(limits = c(0.98, 1.01))
p5 <- ggplot(data = wdf, aes(x = total.sulfur.dioxide, y = residual.sugar)) +
geom_point() +
geom_smooth(method='lm',formula=y~x) +
scale_y_continuous(limits = c(0, 30))
p6 <- ggplot(data = wdf, aes(x = total.sulfur.dioxide, y = density)) +
geom_point() +
geom_smooth(method='lm',formula=y~x) +
scale_y_continuous(limits = c(0.98, 1.01))
b4 <- grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 3, top = textGrob("Bivariate Scatter plot",gp=gpar(fontsize=15,font=3)))
ggsave(file = 'pictures/4_1_bivariate.png', b4)
ggsave(file = 'pictures/4_1_bivariate.png', b4, height=667, width=995, dpi=300)
ggsave(file = 'pictures/4_1_bivariate.png', b4, height=9, width=12, dpi=72)
# GGpairs
# https://www.rdocumentation.org/packages/GGally/versions/1.4.0/topics/ggpairs
ggpairs(wdf) + theme(panel.grid.minor = element_blank(), panel.grid.major = element_blank())
setwd("C:/Users/maru/Documents/dsNanodegree/machine-learning-master/projects/finding_donors/dataAnalysisR/project/")
