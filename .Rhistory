install.packages('ggplot2')
library(ggplot2)
data(diamonds)
bt <- read.csv('data/indicator who bad_teeth.csv')
bt <- read.csv('../data/indicator who bad_teeth.csv')
bt <- read.csv('../dsNanodegree/data_scientist/dataAnalysisR/data/indicator who bad_teeth.csv')
c <- read.csv('../dsNanodegree/data_scientist/dataAnalysisR/data/countries.csv')
gdp <- read.csv('../dsNanodegree/data_scientist/dataAnalysisR/data/gdp2016.csv')
# https://www.theguardian.com/news/datablog/2010/dec/07/world-education-rankings-maths-science-reading
education <- read.csv('../dsNanodegree/data_scientist/dataAnalysisR/data/education.csv')
education$education_mean_score <- ((education$reading+education$math+education$science)/3)
names(bt)[1] <- paste('name')
names(bt)[2] <- paste('bad_teeth_indice')
names(gdp)[2] <- paste('gdp')
new_c <- c[,c('name', 'region', 'sub.region')]
# https://www.statmethods.net/management/merging.html
final_df <- merge(bt, new_c, by='name')
final_df <- merge(final_df, gdp, by='name')
names(final_df)[4] <- 'sub_region'
final_df$gdp <- gsub(',', '', final_df$gdp)
final_df$gdp <- as.numeric(final_df$gdp)
final_df <- merge(final_df, education, by = 'name')
# Plots
ggplot(data=final_df, aes(x=region, y=bad_teeth_indice)) +
geom_boxplot()
# https://stackoverflow.com/questions/1330989/rotating-and-spacing-axis-labels-in-ggplot2
# http://www.sthda.com/english/wiki/ggplot2-box-plot-quick-start-guide-r-software-and-data-visualization
#
ggplot(data=final_df, aes(x=sub_region, y=bad_teeth_indice)) +
geom_boxplot() +
#theme(axis.title.x=element_blank(),
#      axis.text.x=element_blank(),
#      axis.ticks.x=element_blank())
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# https://cdr.ibpad.com.br/htmlwidgets.html
install.packages('plotly')
library(plotly)
p_educa_teeth <- ggplot(data = final_df, aes(x = bad_teeth_indice, y = education_mean_score, size = gdp, color = sub_region)) +
#labs(title = "Education x Bad Teeth Indicator x GDP x World Sub Region", y = "Education Mean Score", x = "Bad Teeth Indicator") +
geom_point(na.rm=TRUE)
ggplotly(p_educa_teeth)
ggplot(data = final_df, aes(x = bad_teeth_indice, y = education_mean_score, size = gdp, color = sub_region)) +
geom_point() +
ggtitle("Education x Bad Teeth Indicator x GDP x World Sub Region") +
labs(x="Bad Teeth Indicator",y="Education Mean Score") +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=15, hjust=0)) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=18, hjust = 0)) +
theme(legend.position="right")
# Plot the Education x Bad Teeth Indicator x GDP x World Sub Region
p_educa_teeth <- ggplot(data = final_df, aes(x = bad_teeth_indice, y = education_mean_score, size = gdp, color = sub_region)) +
geom_point() +
ggtitle("Education x Bad Teeth Indicator x GDP x World Sub Region") +
labs(x="Bad Teeth Indicator",y="Education Mean Score") +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=15, hjust=10)) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=18, hjust = 5)) +
theme(legend.position="right")
ggplotly(p_educa_teeth) %>%
layout(title = "Education x Bad Teeth Indicator x GDP x World Sub Region",
#xaxis = list(showticklabels = FALSE),
legend = list(orientation = "v",
y = 0, x = 10))
library(ggplot2)
library(plotly)
install.packages('plotly')
library(plotly)
ggplot(data = final_df, aes(x = bad_teeth_indice, y = education_mean_score, size = gdp, color = sub_region)) +
geom_point() +
ggtitle("Education x Bad Teeth Indicator x GDP x World Sub Region") +
labs(x="Bad Teeth Indicator",y="Education Mean Score") +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=15, hjust=0)) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=18, hjust = 0)) +
theme(legend.position="right")
ggplot(data = final_df, aes(x = bad_teeth_indice, y = education_mean_score, size = gdp, color = region)) +
geom_point() +
ggtitle("Education x Bad Teeth Indicator x GDP x World Sub Region") +
labs(x="Bad Teeth Indicator",y="Education Mean Score") +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=15, hjust=0)) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=18, hjust = 0)) +
theme(legend.position="right")
ggplot(data = final_df, aes(x = bad_teeth_indice, y = education_mean_score, size = gdp, color = sub_region)) +
geom_point() +
ggtitle("Education x Bad Teeth Indicator x GDP x World Sub Region") +
labs(x="Bad Teeth Indicator",y="Education Mean Score") +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=15, hjust=0)) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=18, hjust = 0)) +
theme(legend.position="right")
ggplot(data = final_df, aes(x = bad_teeth_indice, y = education_mean_score, size = gdp, color = sub_region)) +
geom_point() +
ggtitle('Education x Bad Teeth Indicator x GDP x World Sub Region') +
labs(x = 'Bad Teeth Indicator', y = 'Education Mean Score')
ggplot(data = final_df, aes(x = bad_teeth_indice, y = education_mean_score, size = gdp, color = sub_region)) +
geom_point() +
ggtitle("Education x Bad Teeth Indicator x GDP x World Sub Region") +
labs(x="Bad Teeth Indicator",y="Education Mean Score") +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=15, hjust=0)) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=18, hjust = 0)) +
theme(legend.position="right")
ggplot(data = final_df, aes(x = bad_teeth_indice, y = education_mean_score, size = gdp, shape = sub_region)) +
geom_point() +
ggtitle("Education x Bad Teeth Indicator x GDP x World Sub Region") +
labs(x="Bad Teeth Indicator",y="Education Mean Score") +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=15, hjust=0)) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=18, hjust = 0)) +
theme(legend.position="right")
ggplot(data = final_df, aes(x = bad_teeth_indice, y = education_mean_score, size = gdp, color = sub_region)) +
geom_point() +
ggtitle("Education x Bad Teeth Indicator x GDP x World Sub Region") +
labs(x="Bad Teeth Indicator",y="Education Mean Score") +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=15, hjust=0)) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=18, hjust = 0)) +
theme(legend.position="right")
# https://cdr.ibpad.com.br/htmlwidgets.html
install.packages('plotly', dependencies = TRUE)
library(plotly)
library('plotly')
library('ggplotly')
# Plot the Education x Bad Teeth Indicator x GDP x World Sub Region
p_educa_teeth <- ggplot(data = final_df, aes(x = bad_teeth_indice, y = education_mean_score, size = gdp, color = sub_region)) +
geom_point() +
ggtitle("Education x Bad Teeth Indicator x GDP x World Sub Region") +
labs(x="Bad Teeth Indicator",y="Education Mean Score") +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=15, hjust=10)) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=18, hjust = 5)) +
theme(legend.position="right")
ggplotly(p_educa_teeth) %>%
layout(title = "Education x Bad Teeth Indicator x GDP x World Sub Region",
#xaxis = list(showticklabels = FALSE),
legend = list(orientation = "v",
y = 0, x = 10))
ggplotly(p_educa_teeth) +
layout(title = "Education x Bad Teeth Indicator x GDP x World Sub Region",
#xaxis = list(showticklabels = FALSE),
legend = list(orientation = "v",
y = 0, x = 10))
devtools::install_github("ropensci/plotly")
devtools::install_github("ropensci/plotly")
install.packages('devtools')
devtools::install_github("ropensci/plotly")
# Plot the Education x Bad Teeth Indicator x GDP x World Sub Region
p_educa_teeth <- ggplot(data = final_df, aes(x = bad_teeth_indice, y = education_mean_score, size = gdp, color = sub_region)) +
geom_point() +
ggtitle("Education x Bad Teeth Indicator x GDP x World Sub Region") +
labs(x="Bad Teeth Indicator",y="Education Mean Score") +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=15, hjust=10)) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=18, hjust = 5)) +
theme(legend.position="right")
ggplotly(p_educa_teeth) +
layout(title = "Education x Bad Teeth Indicator x GDP x World Sub Region",
#xaxis = list(showticklabels = FALSE),
legend = list(orientation = "v",
y = 0, x = 10))
install.packages('plotly')
# https://cdr.ibpad.com.br/htmlwidgets.html
install.packages('plotly', dependencies = TRUE)
library("plotlyGeoAssets", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install.packages('randomForest', dependencies = TRUE)
install.packages('ROCR', dependencies = TRUE)
library(ROCR)
library(randomForest)
library(dplyr)
# Load the Data
wdf <- read.csv('data/wineQualityWhites.csv')
# Load the Data
wdf <- read.csv('./data/wineQualityWhites.csv')
# Load the Data
wdf <- read.csv('./data/wineQualityWhites.csv')
# Load the Data
wdf <- read.csv('/data/wineQualityWhites.csv')
getwd()
# Load the Data
wdf <- read.csv('/media/maru/Documents/ead/Udacity/dsNanodegree/data_scientist/dataAnalysisR/project/data/wineQualityWhites.csv')
# Find the outliers based in the 1.5*IQR value
outliers <- data.frame()
for (f in names(wdf[2, -12])) {
q1 <- as.numeric(quantile(wdf[, f], 0.25))
q3 <- as.numeric(quantile(wdf[, f], 0.75))
step <- 1.5*(q3 - q1)
outliers <- rbind(outliers,
subset(wdf, (wdf[, f] <= (q1 - step)) | (wdf[, f] >= (q3 + step))))
}
# Just getting the outliers in more than one feature
outliers <- outliers[duplicated(outliers), ]
dim(outliers)
# Removing the outliers from the dataset
wdf.outliers <- anti_join(wdf, outliers)
wdf.outliers$X <- NULL
wdf.outliers$quality <- as.factor(wdf.outliers$quality)
# Creating Train.outliers and Test.outliers datasets
set.seed(13)
samp <- sample(nrow(wdf.outliers), 0.4 * nrow(wdf.outliers))
train.outliers <- wdf.outliers[samp, ]
test.outliers <- wdf.outliers[-samp, ]
# Random Forest Raw
model <- randomForest(quality ~ . - quality, data = train.outliers)
rf.pred <- predict(model, newdata = test.outliers[, -12])
rf.pred.prob <- predict(model, newdata = test.outliers[, -12], type = 'prob')
s <- length(rf.pred)
a <- 0
bin.pred <- c(1:2819)
while (a < s) {
a <- a + 1
if (rf.pred[a] == test.outliers$quality[a]) {
bin.pred[a] <- 1
print(paste('TRUE', a, rf.pred[a], test.outliers$quality[a], sep = '--'))
} else {
bin.pred[a] <- 0
print(paste('FALSE', a, rf.pred[a], test.outliers$quality[a], sep = '--'))
}
}
#
pred <- prediction(rf.pred, test.outliers$quality)
rf.pred <- as.numeric(rf.pred)
test.outliers$quality <- as.numeric(test.outliers$quality)
s <- length(rf.pred)
a <- 0
bin.pred <- c(1:2819)
while (a < s) {
a <- a + 1
if (rf.pred[a] == test.outliers$quality[a]) {
bin.pred[a] <- 1
print(paste('TRUE', a, rf.pred[a], test.outliers$quality[a], sep = '--'))
} else {
bin.pred[a] <- 0
print(paste('FALSE', a, rf.pred[a], test.outliers$quality[a], sep = '--'))
}
}
#
pred <- prediction(rf.pred, test.outliers$quality)
#
pred <- prediction(rf.pred.prob, bin.pred)
perf <- performance(pred,"tpr","fpr")
#
pred <- prediction(rf.pred.prob[,1], bin.pred)
perf <- performance(pred,"tpr","fpr")
plot(perf)
#
pred <- prediction(rf.pred.prob[,3], bin.pred)
perf <- performance(pred,"tpr","fpr")
plot(perf)
#
pred <- prediction(rf.pred.prob[,4], bin.pred)
perf <- performance(pred,"tpr","fpr")
plot(perf)
#
pred <- prediction(rf.pred.prob[,5], bin.pred)
perf <- performance(pred,"tpr","fpr")
plot(perf)
#
pred <- prediction(rf.pred.prob[,6], bin.pred)
perf <- performance(pred,"tpr","fpr")
plot(perf)
#
pred <- prediction(rf.pred.prob[,7], bin.pred)
perf <- performance(pred,"tpr","fpr")
plot(perf)
#
pred <- prediction(rf.pred.prob[,8], bin.pred)
perf <- performance(pred,"tpr","fpr")
#
pred <- prediction(rf.pred.prob[,2], bin.pred)
perf <- performance(pred,"tpr","fpr")
plot(perf)
#
pred <- prediction(rf.pred.prob[,3], bin.pred)
perf <- performance(pred,"tpr","fpr")
plot(perf)
install.packages('randomForest', dependencies = TRUE)
library(ROCR)
library(randomForest)
library(dplyr)
# Load the Data
wdf <- read.csv('/media/maru/Documents/ead/Udacity/dsNanodegree/data_scientist/dataAnalysisR/project/data/wineQualityWhites.csv')
# Find the outliers based in the 1.5*IQR value
outliers <- data.frame()
for (f in names(wdf[2, -12])) {
q1 <- as.numeric(quantile(wdf[, f], 0.25))
q3 <- as.numeric(quantile(wdf[, f], 0.75))
step <- 1.5*(q3 - q1)
outliers <- rbind(outliers,
subset(wdf, (wdf[, f] <= (q1 - step)) | (wdf[, f] >= (q3 + step))))
}
# Just getting the outliers in more than one feature
outliers <- outliers[duplicated(outliers), ]
dim(outliers)
# Removing the outliers from the dataset
wdf.outliers <- anti_join(wdf, outliers)
wdf.outliers$X <- NULL
wdf.outliers$quality <- as.factor(wdf.outliers$quality)
# Creating Train.outliers and Test.outliers datasets
set.seed(13)
samp <- sample(nrow(wdf.outliers), 0.4 * nrow(wdf.outliers))
train.outliers <- wdf.outliers[samp, ]
test.outliers <- wdf.outliers[-samp, ]
# Random Forest Raw
model <- randomForest(quality ~ . - quality, data = train.outliers)
rf.pred <- predict(model, newdata = test.outliers[, -12])
rf.pred.prob <- predict(model, newdata = test.outliers[, -12], type = 'prob')
rf.pred <- as.numeric(rf.pred)
